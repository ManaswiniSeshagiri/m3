sudo dnf install -y dnf-plugins-core
sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo dnf -y install terraform
terraform -v
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws configure
********************************************
TERRAFORM VPC
vpc
provider "aws" {
  region = "us-east-1"
 
}
 
#This is VPC code
 
resource "aws_vpc" "test-vpc" {
  cidr_block = "10.0.0.0/16"
}
 
# this is Subnet code
resource "aws_subnet" "public-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1b"
  cidr_block        = "10.0.0.0/24"
 
  tags = {
    Name = "Public-subnet"
  }
}
 
 
resource "aws_subnet" "private-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1b"
  cidr_block        = "10.0.1.0/24"
 
  tags = {
    Name = "Private-subnet" #security group
  }
}
resource "aws_security_group" "test_access" {
  name        = "test_access"
  vpc_id      = aws_vpc.test-vpc.id
  description = "allow ssh and http"
 
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
 
}
#security group end here#internet gateway code
resource "aws_internet_gateway" "test-igw" {
  vpc_id = aws_vpc.test-vpc.id
 
  tags = {
    Name = "test-igw"
  }
}
 
 
#Public route table code
 
resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.test-vpc.id
 
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.test-igw.id
  }
 
 
  tags = {
    Name = "public-rt"
 
  }
}
#route Tatable assosication code
resource "aws_route_table_association" "public-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
#ec2 code
resource "aws_instance" "manas-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "lti-mahape"
  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "chennai"
  }
 
}
 
 
##create an EIP for EC2
resource "aws_eip" "manas-ec2-eip" {
  instance = aws_instance.manas-server.id
}
 
#ssh keypair code
resource "aws_key_pair" "ltimindtree" {
  key_name   = "ltikey"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCVhPSsYCUobp34v3ylrEKWY2TfqNGLIsUyK14trpeROfTyoogX0d2nbjY9Po5xJYU2DQe1rBMGelGlNlwW66FX1C3r1J6u0yqYD2gLnO1vXIMR1/VdY+jeHiRPhyVgTJoHL7u0namuCMHaivmgqeb9GA5nj46FtYSLvaDRzA88oU/X+5zdy72deHu0facDot7ZM2EImL68dLVrgMmcOVbwYfGj5I+rHqJGZnPmk4gxRl3eUW4NPbt+xKnD5vmK8M+LqI6D79CVzz6bwnHjZSpbZKpvctBiTFsPuZtn0xEFrsezk2R8cgTepu0s6WmeyqGWLDVkvuABztbQQE6gx4OdurgStgkxTsUIJRYxTd7BtgsaoJ6t6/dn1Tk88Kjv0qYPmNUDX+k2zYeWvwanbScpPBA18BP+sS4Z5hm+nlnnxNy1yqjukJKuD/+4RZ8DIhhcx2s3rerdcAhswYxptIR0CjFh2DP4MOjOVVFSIp/NsTBvVKE5m3eSgILZMY+uBBU= root@terraform.example.com"
}
 
###this is database ec2 code
resource "aws_instance" "database-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.private-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "ltikey"
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "delhi"
  }
 
}
##create a public ip for Nat gateway
resource "aws_eip" "nat-eip" {
}
### create Nat gateway
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}
 
#create private route table
resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.test-vpc.id
 
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }
 
 
  tags = {
    Name = "private-rt"
  }
}
##route Tatable assosication code
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}

**********************************************************

TERRAFORM EC2
resource "aws_security_group" "webserver_access" {
  name        = "webserver_access"
  description = "Allow traffic"
 
  tags = {
    Name = "webserver_access"
  }
}
 
resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.webserver_access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}
 
resource "aws_vpc_security_group_ingress_rule" "allow_ssh" {
  security_group_id = aws_security_group.webserver_access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}
 
resource "aws_vpc_security_group_ingress_rule" "allow_https" {
  security_group_id = aws_security_group.webserver_access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}
 
 
resource "aws_vpc_security_group_egress_rule" "allow_all_taraffic" {
  security_group_id = aws_security_group.webserver_access.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}
resource "aws_instance" "ourfirst" {
  ami               = "ami-05ffe3c48a9991133"
  availability_zone = "us-east-1b"
  instance_type     = "t2.micro"
  security_groups   = ["${aws_security_group.webserver_access.name}"]
  key_name          = "lti-mahape"
 
 
  root_block_device {
    volume_size           = "26"
    volume_type           = "gp2"
    delete_on_termination = true
  }
 
  ebs_block_device {
    device_name           = "/dev/xvdb"
    volume_size           = "10"
    volume_type           = "gp2"
    delete_on_termination = true
  }
 
  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>sample webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF
 
  tags = {
    Name     = "hello-India"
    Stage    = "testing"
    Location = "India"
  }
}

*********************************************
TERRAFORM KEY
data "aws_security_group" "previous-sg" {
  id = "sg-0c4950e8841e59534" #existing security group id
}
 
#code for elastic ip
resource "aws_eip" "manas-eip" {
  instance = aws_instance.manas-server.id
}
#inject my ssh-key
resource "aws_key_pair" "terra_key" {
  key_name   = "terra.key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCVhPSsYCUobp34v3ylrEKWY2TfqNGLIsUyK14trpeROfTyoogX0d2nbjY9Po5xJYU2DQe1rBMGelGlNlwW66FX1C3r1J6u0yqYD2gLnO1vXIMR1/VdY+jeHiRPhyVgTJoHL7u0namuCMHaivmgqeb9GA5nj46FtYSLvaDRzA88oU/X+5zdy72deHu0facDot7ZM2EImL68dLVrgMmcOVbwYfGj5I+rHqJGZnPmk4gxRl3eUW4NPbt+xKnD5vmK8M+LqI6D79CVzz6bwnHjZSpbZKpvctBiTFsPuZtn0xEFrsezk2R8cgTepu0s6WmeyqGWLDVkvuABztbQQE6gx4OdurgStgkxTsUIJRYxTd7BtgsaoJ6t6/dn1Tk88Kjv0qYPmNUDX+k2zYeWvwanbScpPBA18BP+sS4Z5hm+nlnnxNy1yqjukJKuD/+4RZ8DIhhcx2s3rerdcAhswYxptIR0CjFh2DP4MOjOVVFSIp/NsTBvVKE5m3eSgILZMY+uBBU= root@terraform.example.com"
}
 
resource "aws_instance" "manas-server" {
  ami                    = "ami-05ffe3c48a9991133"
  availability_zone      = "us-east-1b"
  instance_type          = "t2.micro"
  key_name               = "terra.key"
  vpc_security_group_ids = [data.aws_security_group.previous-sg.id]
}
[root@terraform proj]# cd
[root@terraform ~]# cd test-code
[root@terraform test-code]# ll
total 16
-rw-r--r--. 1 root root 9313 Jul  3 09:11 terraform.tfstate
-rw-r--r--. 1 root root  570 Jul  3 09:09 ub.tf
[root@terraform test-code]# cat ub.tf
data "aws_security_group" "previous-sg" {
  id = "sg-0c4950e8841e59534"
 
}
data "aws_ami" "ubuntu" {
  most_recent = true
 
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }
 
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
 
  owners = ["099720109477"] # Canonical
}
 
resource "aws_instance" "web" {
  ami               = data.aws_ami.ubuntu.id
  instance_type     = "t2.micro"
  availability_zone = "us-east-1b"
  key_name          = "lti-mahape"
 
 
  tags = {
    Name = "HelloWorld"
  }
}

************************************************************************
TERRAFORM UBUNTU

data "aws_security_group" "previous-sg" {
  id = "sg-0c4950e8841e59534"
 
}
data "aws_ami" "ubuntu" {
  most_recent = true
 
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }
 
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
 
  owners = ["099720109477"] # Canonical
}
 
resource "aws_instance" "web" {
  ami               = data.aws_ami.ubuntu.id
  instance_type     = "t2.micro"
  availability_zone = "us-east-1b"
  key_name          = "lti-mahape"
 
 
  tags = {
    Name = "HelloWorld"
  }
}
